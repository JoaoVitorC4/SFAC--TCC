/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VIEW;


import CTR.FormadePagamentoCTR;
import CTR.GrupoCTR;
import CTR.PerfilCTR;
import CTR.PacoteCTR;
import CTR.PessoaCTR;
import CTR.PlanoCTR;
import CTR.StatusCTR;
import MODEL.FormadePagamentoMODEL;
import MODEL.GrupoMODEL;
import MODEL.MensalidadeMODEL;
import MODEL.PerfilMODEL;
import MODEL.PacoteMODEL;
import MODEL.PessoaMODEL;
import MODEL.PlanoMODEL;
import MODEL.StatusMODEL;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aquin
 */
public class Psq_Identificacao_PacoteVIEW extends javax.swing.JFrame {
    List<PessoaMODEL> listPessoa = null;
    List<PlanoMODEL> listPlano = null;
    List<GrupoMODEL> listGrupo = null;
    ResultSet rspacote;
    PacoteVIEW objpacote = new PacoteVIEW();
    PessoaCTR objpessoa = new PessoaCTR();
    PlanoCTR objplano = new PlanoCTR();
    GrupoCTR objgrupo = new GrupoCTR();
    List<PerfilMODEL> listPerfil;
    PerfilCTR objperfil = new PerfilCTR();
    MensalidadeVIEW objmensalidade = new MensalidadeVIEW();
    PacoteVIEW objpacotetela = new PacoteVIEW();
    public String opcao;
    Psq_PacoteVIEW psqpacote = new Psq_PacoteVIEW();
    
    List<FormadePagamentoMODEL> listFormadepagamento = null;
    List<StatusMODEL> listStatus = null;
    ResultSet rsmensalidade;
    FormadePagamentoCTR objformadepagamento = new FormadePagamentoCTR();
    StatusCTR objstatus = new StatusCTR();
    
    
    
//    
//    String cod_mensalidade;
//    Date emissao_mensalidade;
//    Date vencimento_mensalidade;
//    Date pagamento_mensalidade;
//    String valor_mensalidade;
//    String valorpago_mensalidade;
//    String juros_mensalidade;
//    String desconto_mensalidade;
//    int mensalidade_formadepagamento;
//    int mensalidade_status;
//    int mensalidade_plano;
//    int mensalidade_identificacao;
    
    
    
    String cod_pacote;
    int pessoa_pacote;
    int plano_pacote;
    int grupo_pacote;
    Date vencimento_pacote;
    String identificacao_pacote;
    
    
//    	CREATE TABLE MENSALIDADE(;
//	COD_MENSALIDADE SERIAL PRIMARY KEY,
//	EMISSAO_MENSALIDADE DATE NOT NULL,
//	VENCIMENTO_MENSALIDADE DATE NOT NULL,
//      PAGAMENTO_MENSALIDADE DATE,
//	VALOR_MENSALIDADE FLOAT NOT NULL,
//	VALOR_PAGO_MENSALIDADE FLOAT,
//	JUROS_MENSALIDADE FLOAT,
//	DESCONTO_MENSALIDADE FLOAT,
//MENSALIDADE_FORMADEPAGAMENTO INTEGER REFERENCES FORMADEPAGAMENTO(COD_FPAGAMENTO),
//	MENSALIDADE_STATUS INTEGER REFERENCES STATUS(COD_STATUS),
//	MENSALIDADE_PLANO INTEGER REFERENCES PLANO(COD_PLANO),
//MENSALIDADE_IDENTIFICACAO INTEGER NOT NULL	
//	);

    
  

    public Psq_Identificacao_PacoteVIEW() {
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/icones/LOGO SFAC.png")).getImage());
        pesquisarPacote();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The pacoteent of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPacote = new javax.swing.JTable();
        btnPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pacote");

        jLabel1.setText("Pesquisar :");

        txtPesquisar.setBorder(new RoundedBorder(2));
        txtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarActionPerformed(evt);
            }
        });

        tblPacote = new javax.swing.JTable()
        {
            public boolean isCellEditable(int rollIndex, int colIndex){
                return false;
            }
        };
        tblPacote.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblPacote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPacoteMouseClicked(evt);
            }
        });
        tblPacote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblPacoteKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblPacote);

        btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisa.png"))); // NOI18N
        btnPesquisar.setBorder(new RoundedBorder(7));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("Pacote");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
       pesquisarPacote();
       
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void tblPacoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPacoteMouseClicked
        if(evt.getClickCount() == 2)
        {
            int linha = tblPacote.getSelectedRow();
             String cod_identificacao;
             int identifi;
             
             objpacotetela.setVisible(true);
             objpacotetela.setLocationRelativeTo(null);
             objpacotetela.txtCod_pacote.setText(cod_pacote); 
             
             objpacotetela.opcao = opcao;
             if(opcao.equals("Inserir"))
             {
             String [] options = new String[] {"Sim","Não"};
        
             Object ret = JOptionPane.showOptionDialog
             (null, "Deseja carregar os valores padrões do Pacote: " 
             + "?","AVISO", JOptionPane.YES_NO_OPTION,
             JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        
        if(options[Integer.valueOf(ret.toString())].equals("Sim"))
        {
             identifi = (int)tblPacote.getValueAt(linha,1);
             cod_identificacao = (String) Integer.toString(identifi); 
             objpacotetela.txtIdentificacao_pacote.setText(cod_identificacao);
             
             

             
            java.util.Date utilDatevenc = (Date) tblPacote.getValueAt(linha, 5);
            java.sql.Date sqlDateVencimento = new java.sql.Date(utilDatevenc.getTime());
            
            vencimento_pacote = (Date)sqlDateVencimento;
            objpacotetela.txtVencimento_pacote.setDate(vencimento_pacote); 
            
            listPlano = objplano.PegarPlanoBDPELONOME((String)tblPacote.getValueAt(linha, 3));
            //objmensalidade.txtValor_mensalidade.setText((String)Float.toString(listPlano.get(0).getValor_plano()));
            
            
            objpacotetela.cmbPlano_pacote.setSelectedItem(listPlano.get(0).getNome_plano());
            
            //listPlano.get(objpacote.itemplano).getCod_plano();
            
//            
//            listPlano = objplano.PegarPlanoBDPELONOME((String)tblPacote.getValueAt(linha, 3));
//            
//            valor_mensalidade = (String)Float.toString(listPlano.get(0).getValor_plano());
//            
//            objmensalidade.txtValor_mensalidade.setText(valor_mensalidade);
//                    
//  
//                    
//                    
//                    listPessoa = objpessoa.PegarPessoaBD
//        ((int) tblPacote.getValueAt(linha, 1));
//            
//        objpacote.cmbPessoa_pacote.setSelectedItem
//            (listPessoa.get(0).getNome_pessoa());
    }
}
        
             else if(opcao.equals("Alterar")){
             identifi = (int)tblPacote.getValueAt(linha,1);
             cod_identificacao = (String) Integer.toString(identifi);        
             objpacotetela.txtIdentificacao_pacote.setText(cod_identificacao);
             
             //objmensalidade.txtIdentificacao_mensalidade.setText((String)tblPacote.getValueAt(linha, linha));
            
             }
           this.dispose();
        
        }
        
        
    }//GEN-LAST:event_tblPacoteMouseClicked

    private void tblPacoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPacoteKeyPressed
       // objpacote.opcao = "Alterar";
                        int linha = tblPacote.getSelectedRow();
             String cod_identificacao;
             int identifi;
             
             objpacotetela.setVisible(true);
             objpacotetela.setLocationRelativeTo(null);
             objpacotetela.txtCod_pacote.setText(cod_pacote); 
             
             objpacotetela.opcao = opcao;
             if(opcao.equals("Inserir"))
             {
             String [] options = new String[] {"Sim","Não"};
        
             Object ret = JOptionPane.showOptionDialog
             (null, "Deseja carregar os valores padrões do Pacote: " 
             + "?","AVISO", JOptionPane.YES_NO_OPTION,
             JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        
        if(options[Integer.valueOf(ret.toString())].equals("Sim"))
        {
             identifi = (int)tblPacote.getValueAt(linha,1);
             cod_identificacao = (String) Integer.toString(identifi); 
             objpacotetela.txtIdentificacao_pacote.setText(cod_identificacao);
             
             

             
            java.util.Date utilDatevenc = (Date) tblPacote.getValueAt(linha, 5);
            java.sql.Date sqlDateVencimento = new java.sql.Date(utilDatevenc.getTime());
            
            vencimento_pacote = (Date)sqlDateVencimento;
            objpacotetela.txtVencimento_pacote.setDate(vencimento_pacote); 
            
            listPlano = objplano.PegarPlanoBDPELONOME((String)tblPacote.getValueAt(linha, 3));
            //objmensalidade.txtValor_mensalidade.setText((String)Float.toString(listPlano.get(0).getValor_plano()));
            
            
            objpacotetela.cmbPlano_pacote.setSelectedItem(listPlano.get(0).getNome_plano());
            
            //listPlano.get(objpacote.itemplano).getCod_plano();
            
//            
//            listPlano = objplano.PegarPlanoBDPELONOME((String)tblPacote.getValueAt(linha, 3));
//            
//            valor_mensalidade = (String)Float.toString(listPlano.get(0).getValor_plano());
//            
//            objmensalidade.txtValor_mensalidade.setText(valor_mensalidade);
//                    
//  
//                    
//                    
//                    listPessoa = objpessoa.PegarPessoaBD
//        ((int) tblPacote.getValueAt(linha, 1));
//            
//        objpacote.cmbPessoa_pacote.setSelectedItem
//            (listPessoa.get(0).getNome_pessoa());
    }
}
        
             else if(opcao.equals("Alterar")){
             identifi = (int)tblPacote.getValueAt(linha,1);
             cod_identificacao = (String) Integer.toString(identifi);        
             objpacotetela.txtIdentificacao_pacote.setText(cod_identificacao);
             
             //objmensalidade.txtIdentificacao_mensalidade.setText((String)tblPacote.getValueAt(linha, linha));
            
             }
           this.dispose();
        
    }//GEN-LAST:event_tblPacoteKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Psq_Identificacao_PacoteVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Psq_Identificacao_PacoteVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Psq_Identificacao_PacoteVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Psq_Identificacao_PacoteVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Psq_Identificacao_PacoteVIEW().setVisible(true);
            }
        });
    }

       
   
      public void pesquisarPacote(){
        
            PacoteCTR objpacote = new PacoteCTR();
            rspacote = objpacote.PesquisarIDENTIFICACAOCTR(txtPesquisar.getText());
        
            preenche_conpacote();
        
        }
    
    
    public void preenche_conpacote(){
        
        String [] colunas = {"Código" ,"Identificação","Pessoa","Plano","Grupo","Vencimento"};
        String [][] linhas = {};
        
            DefaultTableModel tablemodel = new DefaultTableModel(linhas,colunas)
        {
            public boolean CelulaEditavel(int rowIndex, int mColIndex)
            {
                return false;
            }
        };
    
            Vector < Vector> dados = new Vector();
        try {
            while (rspacote.next())
            {
               Vector regVetor = new Vector();
               
               regVetor.add(rspacote.getInt("cod_pacote"));
               regVetor.add(rspacote.getInt("identificacao_pacote"));
                regVetor.add(rspacote.getString("nome_pessoa"));             
                regVetor.add(rspacote.getString("nome_plano"));             
                regVetor.add(rspacote.getString("nome_grupo"));
                regVetor.add(rspacote.getDate("vencimento_pacote"));

                
                   
               dados.add(regVetor);
               tablemodel.addRow(regVetor);
            }  
            tblPacote.setModel(tablemodel);
        } catch (SQLException ex) {
            Logger.getLogger(Psq_Identificacao_PacoteVIEW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void ExcluirPacote()
    {
        PacoteCTR objusu = new PacoteCTR();
        
        int linha = tblPacote.getSelectedRow();
            
        objpacote.cod_pacote = (int) tblPacote.getValueAt(linha, 0);
        
        
        objusu.ExcluiPacoteCTR(objpacote.cod_pacote);
    }
    
    
       private static class RoundedBorder implements Border {
        
        private int radius;
        
        RoundedBorder(int radius) {
            this.radius = radius;
        }
        public Insets getBorderInsets(Component c) {
            return new Insets(this.radius+1, this.radius+1, this.radius+2, this.radius);
        }

        public boolean isBorderOpaque() {
            return true;
        }

        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x,y,width-1,height-1,radius,radius);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tblPacote;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables

}
